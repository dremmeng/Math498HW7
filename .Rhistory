knitr::opts_chunk$set(echo = TRUE)
modDir<- "~/School/Math498/HW7/"
setwd(  paste0(modDir,"/HW7/" ) )
modDir<- "~/School/Math498/HW7/"
source( paste0(modDir, "R/naturalSplineBasis.R"))
modDir<- "~/School/Math498/HW7/"
source( paste0(modDir, "/naturalSplineBasis.R"))
source( paste0(modDir, "/naturalCubicSplineR.R"))
source( "InverseExampleFunctions.R")
suppressMessages(library( fields))
suppressMessages(library( fda))
set.seed(123)
M<- 200
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
dim( W)
WInd<- W>0
stats(  rowSums( WInd))
EY<- W%*%truef
fields.style()
plot( center, EY, pch=16)
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
lines( sGrid, truef, col="blue")
title("expected value of observations and interval centers
true curve (green)")
fHat<- fitWBS(z,W,6,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
fHat<- fitWSS(z,W, 50 ,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
val = 4:15
for x in val{
trainIndex <- createDataPartition(trueF, p = .9,
list = FALSE,
times = 1)
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
smp_size <- floor(0.9 * nrow(truef))
train_ind <- sample(seq_len(nrow(truef)), size = smp_size)
smp_size <- floor(0.9 * nrow(truef))
train_ind <- sample(nrow(truef), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(nrow(truef), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(seq_length(nrow(truef)), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(seq_length(nrow(truef)), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(seq_len(nrow(truef)), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(seq_len(ncol(truef)), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(seq_len((truef)), size = smp_size)
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- truef[train_ind, ]
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- truef[train_ind]
test <- truef[-train_ind]
val = 4:15
for (x in val){
fHat<- fitWBS(z,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
}
View(W)
View(WInd)
View(z)
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- z[train_ind]
test <- z[-train_ind]
set.seed(123)
M<- 180
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
EY<- W%*%truef
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
val = 4:15
crossvalidation = c()
for (x in val){
fHat<- fitWBS(train,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
crossvalidation <- append(mean(fHat-truef))
}
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- z[train_ind]
test <- z[-train_ind]
set.seed(123)
M<- 180
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
EY<- W%*%truef
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
val = 4:15
crossvalidation = c()
for (x in val){
fHat<- fitWBS(z,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
crossvalidation <- append(mean(fHat-truef))
}
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- z[train_ind]
test <- z[-train_ind]
set.seed(123)
M<- 180
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
EY<- W%*%truef
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
val = 4:15
crossvalidation = c()
for (x in val){
fHat<- fitWBS(z,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
crossvalidation.append(mean(fHat-truef)/x)
}
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- z[train_ind]
test <- z[-train_ind]
set.seed(123)
M<- 180
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
EY<- W%*%truef
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
val = 4:15
crossvalidation = c()
for (x in val){
fHat<- fitWBS(z,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
append(crossvalidation,mean(fHat-truef)/x)
}
plot(crossvalidation)
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- z[train_ind]
test <- z[-train_ind]
set.seed(123)
M<- 180
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
EY<- W%*%truef
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
val = 4:15
crossvalidation = c()
for (x in val){
fHat<- fitWBS(z,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
append(crossvalidation,val=mean(fHat-truef)/x)
}
smp_size <- floor(0.9 * 200)
train_ind <- sample(200, size = smp_size)
train <- z[train_ind]
test <- z[-train_ind]
set.seed(123)
M<- 180
sGrid<- 1:M
uGrid<- sGrid/ M
truef<- 9*uGrid*(1-uGrid)^3
N<- 80
W<- matrix(0,N,M)
I<- matrix( NA, N,2)
center<- rep(NA, N)
set.seed(222)
for(  k in 1:N){
c0<- sample( 1:M, 1, replace=FALSE)
w0<- sample( 5:(M/2), 1, replace=FALSE)
i<-  c( max( c(c0-w0,1) ) , min(c(c0+w0,M) ))
I[k,]<- i
W[k, i[1]:i[2] ] <- 1/(i[2]- i[1])
center[k]<- (i[2] + i[1])/2
}
EY<- W%*%truef
set.seed( 222)
error<- .05*rnorm( N)
z<- EY +error
val = 4:15
crossvalidation = c()
for (x in val){
fHat<- fitWBS(z,W,x,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
lines( sGrid, truef, col=2)
append(crossvalidation,val=mean(fHat-truef)/x)
}
plot(crossvalidation)
val= 50:150
for (x in val){
fHat<- fitWSS(z,W, x ,sGrid)
fields.style()
plot( sGrid, fHat, type="l")
}
lines( sGrid, truef, col=2)
install.packages("viridis")
install.packages("viridis")
source( paste0(modDir, "/naturalSplineBasis.R"))
source( paste0(modDir, "/naturalCubicSplineR.R"))
source( "InverseExampleFunctions.R")
suppressMessages(library( fields))
suppressMessages(library( fda))
source("/naturalSplineBasis.R"))
source("/naturalSplineBasis.R"))
source("/naturalSplineBasis.R")
source("naturalSplineBasis.R")
source("naturalCubicSplineR.R")
source("InverseExampleFunctions.R")
suppressMessages(library( fields))
suppressMessages(library( fda))
knitr::opts_chunk$set(echo = TRUE)
library(viridis)
